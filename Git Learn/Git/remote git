git学习笔记
##远程git
【丢弃没有被合并过的分支】
git branch -D 分支名

【查看远程库信息】
git remote
git remote -v

【推送分支】
git push origin master
     把该分支上的所有本地提交推送到远程库，要指定本地分支

【推送其他分支】
git push origin dev

##多人协作
【克隆分支】
git clone git@github.com:shen445122/startgit.git

【查看分支情况】
git branch

【创建远程origin的dev分支】
git checkout -b dev origin/dev
     要在dev分支上开发，就必须创建远程origin的dev分支到本地

##同时不同人推送同一文件到远程
推送失败，因为你的小伙伴的最新提交和你试图推送的提交有冲突，解决办法也很简单，Git已经提示我们，先用git pull把最新的提交从origin/dev抓下来，然后，在本地合并，解决冲突，再推送

【拉取远程库】
git pull
	此时的拉取也会提示失败，原因是没有指定本地dev分支与远程origin/dev分支的链接，根据提示，设置dev和origin/dev的链接

【设置dev和origin/dev的链接】
git branch --set-upstream dev origin/dev

【再次拉取】
git pull
	合并有冲突，需要手动解决，解决的方法和分支管理中的解决冲突完全一样。解决后，提交，再push


##打标签
【打标签】
git tag v1.0
	默认为HEAD，也可以指定一个commit id；

【查看所有标签】
git tag

【指定id打标签】
git log --pretty=oneline --abbrev-commit
git tag v0.9 6224937
git tag

【查看标签内容】
git show v0.9

【打标签时加上说明】
git tag -a v0.1 -m "version 0.1 released" 3628164

【使用私钥加标签】
git tag -s v0.2 -m "signed version 0.2 released" fec145a
	签名采用PGP签名，因此，必须首先安装gpg（GnuPG），如果没有找到gpg，或者没有gpg密钥对，就会报错：

【查看PGP签名信息】
git show v0.2标签名

##操作标签
【删除标签】
git tag -d v0.1

【推送某个标签到远程】
从远程仓库克隆时，实际上Git自动把本地的master分支和远程的master分支对应起来了，并且，远程仓库的默认名称是origin

【删除标签】
git tag -d v0.1
git push origin --tags
	推送全部

【删除远程标签】
git tag -d v0.9（删除本地）
git push origin :refs/tags/v0.9

##参与别人的项目
【克隆到本地】
git clone git@github.com:shen445122/bootstrap.git
	- 一定要从自己的账号下clone仓库，这样你才能推送修改
	- 如果你想修复bootstrap的一个bug，或者新增一个功能，立刻就可以开始干活，干完后，往自己的仓库推送。
	- 如果你希望bootstrap的官方库能接受你的修改，你就可以在GitHub上发起一个pull request。当然，对方是否接受你的pull request就不一定了。


【分支推送到远程的规则】
  - master分支是主分支，因此要时刻与远程同步；
  - dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；
  - bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；
  - feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。

【多人协作模式】
  - 多人协作的工作模式通常是这样：

  - 首先，可以试图用git push origin branch-name推送自己的修改；
  - 如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
  - 如果合并有冲突，则解决冲突，并在本地提交；
  - 没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！
  - 如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name。
  - 这就是多人协作的工作模式，一旦熟悉了，就非常简单。

##自定义Git
【显示颜色】
git config --global color.ui true

【忽略推送文件】
在Git工作区的根目录下创建一个特殊的.gitignore文件，然后把要忽略的文件名填进去，Git就会自动忽略这些文件。

忽略文件的原则是：
  - 忽略操作系统自动生成的文件，比如缩略图等；
  - 忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如Java编译产生的.class文件；
  - 忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。
  - 最后一步就是把.gitignore也提交到Git，就完成了！当然检验.gitignore的标准是git status命令是不是说working directory clean。
    https://github.com/github/gitignore

【配置别名】
git config --global alias.unstage 'reset HEAD'
git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
git config --global --unset alias.st（取消）

【配置文件】
  - .git/config文件中
  - 配置Git的时候，加上--global是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用。
  - 而当前用户的Git配置文件放在用户主目录下的一个隐藏文件.gitconfig中
